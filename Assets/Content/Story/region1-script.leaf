# basePath   region1

:: welcome
@trigger GameBooted
@conditions     intro:tutorialComplete = false
@cutscene
@once
// $call Pause()
$call PauseAlertType("ExcessRunoff")

$call CutsceneBegin(1)
    $call CutscenePrepareImages("intro/frame1-1.png", "intro/frame1-2.png", "intro/frame1-3.png")
    $call CutsceneAllImages(0.3)
    You have become the Director of the Sustainable Agricultural Growth Administration: SAGA.
    $call CutscenePrepareImages("intro/frame2-1.png", "intro/frame2-2.png", "intro/frame2-3.png")
	$call CutsceneAllImages(0.3)
	This county is young. It's your job as SAGA director to help them grow...
	$call CutscenePrepareImages("intro/frame3-1.png", "intro/frame3-2.png", "intro/frame3-3.png")
	$call CutsceneNextImage()
	And protect them from threats. 
    $call CutsceneAllImages(0.3)
    Some speak of a terrible <b>green tide</b> that brings ruin in its wake...
	$call CutscenePrepareImages("intro/frame4-1.png", "intro/frame4-2.png", "intro/frame4-3.png")
	$call CutsceneAllImages(0.3)
	Your first assignment is <i>Knoll County</i>. You will meet two Advisors to help you on your way...
$call CutsceneEnd()

{@advisorEconHill}      Greetings! Welcome to Knoll County.
$call ForceDialogueInteraction()
{@advisorEconHill}      I'm here to advise you on money matters. 
{@advisorEconHill}      Knoll County is a growing producer of milk...
{@advisorEconHill}      ...but these farms and businesses aren't connected.
$call PanToBuilding("region1_city1")
{@advisorEconHill}      There's the <i>City</i> of Pendleton Hills...
{@advisorEconHill}      They consume <b>Milk</b> and generate <b>Money</b>.
$call PanToBuilding("region1_grain1")
{@advisorEconHill}      Then Henrietta's <i>Grain Farm</i>...
{@advisorEconHill}      She uses <b>Fertilizer</b> to grow <b>Grain</b>.
$call PanToBuilding("region1_cafo1")
{@advisorEconHill}      And finally Bertram's <i>Dairy Farm</i>!
{@advisorEconHill}      His cows consume <b>Grain</b> to produce <b>Milk</b> and <b>Manure</b>.
{@advisorEcolHill}      Well, it's a bit more than just a "dairy farm." It's a huge operation!
{@advisorEcolHill}      I'll be informing you on environmental concerns, by the way.
{@advisorEconHill}      Yes, thank you. But back to <i>important</i> things. Like establishing trade routes!
$call ReleaseDialogueInteraction()
$call FocusHighlightOn("BuildModeButton")
{@advisorEconHill}      Open <b>Build Mode</b>.

:: startedBlueprintMode
@trigger BlueprintModeEntered
@conditions     intro:tutorialComplete = false, intro:roadBuilt = false
@cutscene
$call FocusClear()
{@advisorEconHill}      Splendid!
{@advisorEconHill}      Here you can use SAGA funds to build in <b>this county.</b>
{@advisorEconHill}      Let's use a <b>Road</b> to create a trade route.
$call FocusHighlightOn("ShopButton1")

:: prematureExitBuild
@trigger BlueprintModeExited
@conditions     intro:tutorialComplete = false, intro:roadBuilt = false
@cutscene
$call FocusClear()
$call Wait(3)
$call FocusHighlightOn("BuildModeButton")
{@advisorEconHill}      Open <b>Build Mode</b>.

// Step 2: Road drawing tutorial
:: roadSelected
@trigger BuildButtonPressed
@conditions     intro:tutorialComplete = false, intro:roadBuilt = false
@cutscene
$call FocusClear()
{@advisorEconHill}      Each road segment costs $5. 
{@advisorEconHill}      You will see a running total of your costs as you build.
{@advisorEcolHill}      You can't build over any <b>red tiles</b>. Those are protected areas!
{@advisorEconHill}      The trade of <b>Grain</b> and <b>Milk</b> will form the core of our economy.
{@advisorEconHill}      First, build a road from the <i>Grain Farm</i> to the <i>Dairy Farm</i>.
$call PanToBuilding("region1_grain1", -1)
$call ShowAnimatedTutorial("ClickDragTutorial")


// Step 3: Introduce cities
:: farmsConnected
@trigger    FarmConnection
@conditions     intro:tutorialComplete = false
@cutscene
@once
// $call Pause()
$call FocusClear()
$set intro:roadBuilt = true
$set intro:farmsConnected = true
$if intro:citiesConnected
    $call HideAnimatedTutorial()
    $call ForceDialogueInteraction()
    {local @cafoFarmer}    Heck yeah! Now I can buy <b>Grain</b> for my cows.
    {local @grainFarmer}   I'm happy to provide!
    // Commenting out, there's no fertilizer economy until the runoff fine is in place
    // {@advisorEconHill}     It's the beginning of our local <i>Fertilizer Economy</i>.
    // {local @cafoFarmer}    Yeah, I'm going broke here. It would be great to turn manure into money. 

    $branch .farmsAndCitiesConnected
$else
    // Step 4: Connect city and dairy
    // {@advisorEconHill}   Now the Grain Farm can buy <i>manure</i> from the Dairy Farm.
    {local @cafoFarmer}    Heck yeah! Now I can buy <b>Grain</b> for my cows.
    {local @grainFarmer}   I'm happy to provide!
    {local @cafoFarmer}    But I still need to sell my <b>Milk.</b>
    $if !intro:citiesConnected 
        $call PanToBuilding("region1_city1", -0.5)
        {local @urbanite}       Hey, we'll buy that <b>Milk!</b>
        {@advisorEconHill}      Hear that? We just need a <i>Road</i> to connect the Dairy Farm to the City.
        $call FocusHighlightOn("BuildModeButton")
    $endif
$endif
// $call Unpause()

:: clearBlueprintHighlight
@trigger BlueprintModeEntered
@conditions     intro:tutorialComplete = false, intro:roadBuilt = true
@cutscene
$call FocusClear()

:: cityConnected
@trigger    CityConnection
@conditions     intro:tutorialComplete = false
@cutscene
@once
// $call Pause()
$set intro:roadBuilt = true
$set intro:citiesConnected = true
$if intro:farmsConnected
    $call HideAnimatedTutorial()
    $call ForceDialogueInteraction()
    {@advisorEconHill}      Pendleton Hills has a source of <b>Milk</b>!
    {local @urbanite}       Woohoo! I'm gonna eat <i>so much</i> cereal now.
    $branch .farmsAndCitiesConnected
$else
    // connected city and dairy before dairy and grain
    {@advisorEconHill}      Erm, sure! We can start here.
    {local @cafoFarmer}     Great, I have a buyer for <b>Milk</b>!
    {local @cafoFarmer}     But my cows gotta eat <b>Grain</b> to make <b>Milk</b>.
    {@advisorEconHill}      Good point.
    $call PanToBuilding("region1_grain1")
    {@advisorEconHill}      Build another road, now between the <b>Dairy Farm</b> and the <b>Grain Farm.</b>
$endif

// $call Unpause()

:: farmsAndCitiesConnected 
@conditions     intro:tutorialComplete = false
@once
@cutscene
$set intro:farmsAndCities = true
$call HideAnimatedTutorial()
{@advisorEconHill}      Everything in the county is connected.
{@advisorEconHill}      SAGA will gain <b>$5</b> for every <b>shipment of milk</b> the City consumes.
{@advisorEconHill}      That milk fuels taxable work, and gives us a budget!
{@advisorEconHill}      But we may need more funding.
{@advisorEconHill}      I've unlocked the Sales Tax policy.
$call UnlockCards(SalesTaxPolicy)
{@advisorEconHill}      See me again from your <b>Economic Advisor</b> button.
$call ForceCloseDialogue()
$call Wait(0.4)
$call FocusHighlightOn("EconomyAdvisor")
$call ReleaseDialogueInteraction()

:: wrongAdvisor
@trigger AdvisorOpened
@conditions     advisorType == "Ecology", intro:farmsAndCities, intro:tutorialComplete = false
@cutscene
$call FocusClear()
{@advisorEcolHill}      Hey there!
{@advisorEcolHill}      I think Pippin wanted to talk to you.
{@advisorEcolHill}      His <b>Economic Advisor</b> button has a gem on it. Pretty ostentatious if you ask me...
$call FocusHighlightOn("EconomyAdvisor")

:: letsGetStarted
@trigger AdvisorOpened
@conditions     advisorType == "Economy", intro:farmsAndCities, intro:tutorialComplete == false
@forcePolicy    Economy
@cutscene
@once
$call FocusClear()
$set intro:pendingPolicy = true
{@advisorEconHill}     Hello again!
{@advisorEconHill}     You can see me here to adjust Knoll County's policies.
{@advisorEconHill}     As for that <b>Sales Policy</b>: it can provide additional revenue.
{@advisorEconHill}     But set it too high, and farms may <b>slow down production.</b>
{viewpoliciesnext}
{@advisorEconHill}     What do you think? Don't worry too much, we can change it at any time.
// $call ForcePolicyInstant("Economy")

:: closedWithoutSettingPolicy
@trigger    AdvisorClosed
@conditions intro:pendingPolicy == true, intro:tutorialComplete == false
@forcePolicy    Economy
@cutscene
{@advisorEconHill}      Hold on there!
{@advisorEconHill}      Make sure to set a Sales Policy before you leave.
{viewpoliciesnext}
{@advisorEconHill}      You can set it to None if you like, but we ought to decide.
// $call ForcePolicyInstant("Economy")

// :: setPolicyReminder
// @trigger AdvisorOpened
// @conditions advisorType == "Economy", intro:farmsAndCities, intro:tutorialComplete == false, Visited("region1.letsGetStarted")
// @forcePolicy    Economy
// $call FocusClear()
// {viewpoliciesnext}
// {@advisorEconHill}      Choose a Sales Policy and we can continue.

// :: sittingOmens
// @trigger        LetSat
// @conditions     intro:citiesConnected, intro:farmsConnected
// @once
// $call Pause()
// $call PanToBuilding("region1_cafo1")
// {@advisorEcolHill}      This dairy farm is letting manure sit.
// {@advisorEcolHill}  It is sinking into the groundwater and will run off into the lakes. 
// {@advisorEconHill}      Indeed. They simply have no more favorable alternatives.
// {@advisorEcolHill}      This could be bad for the future of the lakes...
// $call Unpause()

// :: testDialogueBubble
// @trigger AlertExamined
// @conditions alertType == "dialogue", buildingType == "GrainFarm"
// @once
// {local @grainFarmer} I've got something to say!
// // $call QueueDialogueBubble(region1_city1, region1.testResponseDialogue)


:: openedToForest
@trigger AlertExamined
@conditions alertType == "dialogue", buildingType == "City", alertRegion == 1, RegionUnlocked(2)
@once
{@advisorEconHill}      Ah, you've expanded into Cypress County. Lucky you.
{@advisorEconHill}      Now you can be <i>condescended to</i> while surrounded by natural splendor.
{@advisorEcolHill}      I'm surprised you're not friends with Agatha! You're both economics weirdos.
{@advisorEconHill}      Well, she smells like mushrooms.
{@advisorEconHill}      And she looks like she's going to cast a hex on me...

:: bertramWantsStorage
@trigger AlertExamined
@conditions alertType == "dialogue", buildingType == "DairyFarm", alertRegion == 1, global:storageUnlocked
@once
$if BuildingBuiltInRegion(1, "Storage")
    {@cafoHill}         Hey, that newfangled <b>Storage</b> unit is great!
    {@cafoHill}         I might actually be able to make a profit on all this manure.
    {@advisorEconHill}  Delightful news!
$else
    {@cafoHill}         Hey, can we get one of those fancy <b>Storage</b> units?
    {@cafoHill}         It would be nice to make some money on all this manure.
    {@advisorEconHill}  Excellent idea! 
    {@advisorEconHill}  That manure has value, but it's going to waste due to shipping costs and runoff.
    {@advisorEconHill}  I suggest building a <b>Storage</b> unit nearby... if we can afford it.
$endif


:: openedToPrairie
@trigger AlertExamined
@conditions alertType == "dialogue", buildingType == "City", alertRegion == 1, RegionUnlocked(3)
@once
{@advisorEcolHill}      Ugh... Those Heath County people always irked me.
{@advisorEcolHill}      They think they're better than everyone because of that fancy college.
{@advisorEcolHill}      Plus their straw hats are weird!


:: graphPrettyCool
@trigger AlertExamined
@conditions alertType == "dialogue", buildingType == "City", alertRegion == 1, global:tradeGraphsUnlocked
{@advisorEcolHill}      Okay, I gotta admit... that Market Share graph thingy is pretty cool.
{@advisorEcolHill}      You get all that information just from buying decisions?
{@advisorEconPrairie}   Yes ma'am! And we can use it to help bring our Phosphorus in balance.
{@advisorEcolHill}      I guess economics isn't <i>all</i> bad...
{@advisorEconHill}      Like I've been saying!!


:: specialDelivery
@trigger    ExternalImport
// @conditions !intro:exporterFound
@cutscene
@once
// $call Pause()
// $set intro:exporterFound = true
$call PanToBuilding("region1_grain1")
{@advisorEconHill}      Ho! Special delivery!
{@advisorEconHill}      Henrietta's Grain Farm imported some <i>mineral fertilizer</i>.
{local @grainFarmer}    My crops need <b>phosphorus</b> to grow...
{local @grainFarmer}    There's some <b>phosphorus</b> in the soil, but it's not enough!
{local @grainFarmer}    <b>PHOS4US</b> ships mineral phosphorus to my farm for cheap.
{@advisorEcolHill}      Woah there! We're adding MORE nutrients to our soil?
{@advisorEcolHill}      This could disrupt the <b>phosphorus</b> cycle!
$call AddAutoAlertCondition("Bloom", 1)
{@advisorEconHill}      I'm sure Henrietta has a good reason. Let's take a look...
$set local:taxLevel = PolicyLevelInRegion(1, "SalesTaxPolicy")
$call OpenInfoPopup("region1_grain1")
{@advisorEconHill}      The <b>Inspector</b> shows where she could <b>buy from</b>.
{local @grainFarmer}    See, PHOS4US is the only seller around!
$if local:taxLevel > 0, local:taxLevel < 3
    {local @grainFarmer}    And that <b>Sales Tax</b> of yours is increasing the price...
$elseif local:taxLevel = 3
    {local @grainFarmer}    Thank goodness your <b>Subsidy</b> is lowering the price!
$endif
{@advisorEcolHill}      What about manure? That has phosphorus.
$call CloseInfoPopup()
{@advisorEconHill}      Shall we ask Bertram?
$call OpenInfoPopup("region1_cafo1")
$call Wait(0.5)
{@advisorEconHill}      Here, the <b>Inspector</b> shows where he could <b>sell to</b>.
{local @cafoFarmer}     I <i>could</i> sell manure to Henrietta, but I would lose money <b>shipping</b> that heavy stuff!
{@advisorEconHill}      And a longer road means a higher <b>shipping cost</b>.
{local @cafoFarmer}     Right. Better to just let the manure sit.
$call CloseInfoPopup()
{@advisorEconHill}      I see.
{@advisorEconHill}      You can always check the <b>Inspector</b> again by clicking on a farm.

// $call Unpause()



:: ecologyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Ecology", CameraInRegion(1), intro:tutorialComplete
// @forcePolicy    Ecology
$if PolicyIsUnlocked(RunoffPolicy)
    $call ForcePolicyInstant("Ecology")
    {local @advisorEcol}    Hey there, boss! Here to check out some policies?
$else
    {local @advisorEcol}    Hey there! No policies to assign yet.
$endif

:: economyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Economy", CameraInRegion(1), intro:tutorialComplete
// @forcePolicy   Economy
$if PolicyIsUnlocked(SalesTaxPolicy)
    $call ForcePolicyInstant("Economy")
    {local @advisorEcon}    Here are the economic policies.
$else
    {local @advisorEcon}    Greetings. Once we have economic policies to set, you can come see me.
$endif

// :: preBloomRunoff
// @trigger        AlertExamined
// @conditions     alertType == "excess-runoff", CameraInRegion(1)
// @once
// {local @advisorEcol}    Hold on... This farm is just letting manure sit around!
// {local @advisorEcon}    An astute observation. What would you have them do with it?
// {local @advisorEcol}    Well, it's got phosphorus. Why not make use of it?
// {local @advisorEcon}    Who would pay to ship around truckloads of poop when there's Phos 4 Us?
// {local @advisorEcol}    Hmm...


:: runoffTrigger
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", alertRegion == 1, isFromGrainFarm == false
// @forcePolicy    Ecology
@queued
@cutscene
@once
// $call Pause()
$set global:runoffDiscovered = true
{@advisorEcolHill}      This farm is just letting manure leach into the water table!
{@advisorEcolHill}      That must be behind those algae blooms.
{@advisorEconHill}      Maybe so, but they simply have no more favorable alternatives.
{@advisorEcolHill}      Well, let's make it less favorable. How about a <b>fine</b> for runoff?
$call UnlockCards(RunoffPolicy)
{local @cafoFarmer}     A fine!? I'm barely scraping by as is. You'd have me selling at a loss!
{@advisorEconHill}      Hrm... A fine <i>could</i> incentivize selling manure...
{@advisorEconHill}      But Bertram is correct. Selling at a loss could disrupt the supply chain.
{viewpoliciesnext}
{@advisorEcolHill}      What do you think, boss?
$call ForcePolicyInstant("Ecology")

:: explainPhosphorus
@trigger AlertExamined
@conditions alertType == "dialogue", buildingType == "GrainFarm", alertRegion == 1, global:runoffDiscovered
@once
{@grainHill}        Hey, what's so bad about <b>Phosphorus</b> anyway?
{@advisorEcolHill}  <b>Phosphorus</b> itself isn't bad! It's an essential nutrient for life.
{@advisorEcolHill}  It converts between various forms in a cycle, like water.
{@advisorEcolHill}  But bringing in excess Phosphorus from elsewhere, like PHOS4US...
{@advisorEcolHill}  That can unbalance our local cycle, and cause problems!
{@grainHill}        Like that Algae Bloom!
{@advisorEcolHill}  Exactly.

:: urgentMilkRequestHill
@trigger        UrgentRequest
@conditions     resource == "Milk", alertRegion == 1
@once
$call QueueDialogueBubble(region1_city1, region1.cityNeedsMilk)

:: cityNeedsMilk
@queued
@once
{@cityHill}     Hey, we're running out of milk over here!
{@cityHill}     Please... don't make me eat dry cereal!

:: urgentMilkSubsidy
@trigger        UrgentRequest
@conditions     resource == "Milk", alertRegion == 1, global:importUnlocked
@once
$call QueueDialogueBubble(region1_city1, region1.suggestMilkSubsidy)

:: suggestMilkSubsidy
@queued
@once
{@cityHill}     Our milk supply is running low...
$if PolicyLevelInRegion(1, "ImportTaxPolicy") == 1 // Milk Subsidy
    {@cityHill}     Hopefully that <b>Milk Subsidy</b> will help...
    {@cityHill}     That'll make it cheaper for us to buy milk from other counties!
$else
    {@cityHill}     Hey, why not use an <b>Import Subsidy</b>?
    {@cityHill}     Bertram's farm might not be enough for our whole town...
    {@cityHill}     But a subsidy will make milk from other counties cheaper!
$endif

:: firstManureSold
@trigger        ManureSold
@conditions     alertRegion == 1
@once
$call QueueDialogueBubble(region1_cafo1, region1.runoffFineWorking)

:: runoffFineWorking
@once
@queued
{@advisorEcolHill}      Aha!
{@advisorEcolHill}      Did you see? Bertram just sold manure! The Runoff Fine is working!
{@advisorEconHill}      Could this be activating a <i>Fertilizer Market!?</i>
{@cafoHill}             Uh... not to be a downer, but..
$call OpenInfoPopup("region1_cafo1")
{@cafoHill}             I'm only selling this stuff to avoid your <b>Runoff Fine.</b>
{@cafoHill}             I'm still losing money on the <b>shipping costs!</b>
{@cafoHill}             I might have to <b>slow down production</b> if this keeps up.
{@advisorEcolHill}      Well, we still gotta prevent runoff...
{@advisorEcolHill}      Maybe there's a way of <b>lowering</b> shipping costs?
$call CloseInfoPopup()
{@advisorEconHill}      Hmm... I'll think on it.

:: genericRunoff
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", alertRegion == 1, global:runoffDiscovered, isFromGrainFarm == false
@queued
// $call Pause()
{local @advisorEcol}    More runoff... 
$if PolicyLevelInRegion(1, "RunoffPolicy") < 3
    {@advisorEcolHill}      Maybe we ought to increase our runoff fine?
    {@advisorEconHill}      Careful now! We don't want to bankrupt our farmers.
    {@advisorEconHill}      We just need to give them a more favorable option.
$else
    {@advisorEcolHill}      Our runoff fine is high as can be...
    {@advisorEconHill}      Perhaps this farm needs a manure buyer.
$endif

$if Visited("region2.unlockStorage"), !BuildingBuiltInRegion(1, "Storage")
    {@advisorEconHill}    Or we could build a <b>Storage</b> unit.
$endif

:: discoverFirstBloom
@trigger        AlertExamined
@cutscene
@conditions     alertType == "bloom", alertRegion == 1 
@once
// $call Pause()
$set global:bloomDiscovered = true
// TODO: trigger ACT 2 HERE.
{@advisorEcolHill}    What's this...?
$call CutsceneBegin(2)
    $call CutscenePrepareImages("act2/2-1-1.png", "act2/2-1-2.png", "act2/2-1-3.png")
    $call CutsceneAllImages(0.5)
    Something is wrong with the lakes. They are filled with revolting green algae! It's depleting lake oxygen and killing fish...
    $call CutscenePrepareImages("act2/2-2-1.png", "act2/2-2-2.png", "act2/2-2-3.png")
	$call CutsceneAllImages(0.5)
	Algae loves phosphorus... Could the grain farmers be to blame? They import and apply lots of mineral <b>phosphorus!</b>
    $call CutscenePrepareImages("act2/2-3-1.png", "act2/2-3-2.png", "act2/2-3-3.png")
	$call CutsceneAllImages(0.5)
	Or are the dairy farmers at fault? Their cows' <b>phosphorus</b>-filled manure runs off into the lakes too!
    $call CutscenePrepareImages("act2/2-4-1.png", "act2/2-4-2.png", "act2/2-4-3.png")
	$call CutsceneAllImages(0.5)
    Nearby farms might be able to afford manure fertilizer... But long-distance shipping is just too costly!
    $call CutscenePrepareImages("act2/2-5-1.png", "act2/2-5-2.png", "act2/2-5-3.png")
	$call CutsceneAllImages(0.5)
	Whoever is to blame, our cities need milk and clean water. You - and SAGA - will need to take action.
$call CutsceneEnd()
{@advisorEcolHill}    When there's enough <b>phosphorus</b> in the water, <b>Algae</b> begins to take over.
{@advisorEcolHill}    It takes up the nutrients that other organisms need, and can even produce toxins.
{@advisorEcolHill}    Our <b>City</b> will become stressed if there are blooms nearby!
{@advisorEcolHill}    Some algae blooms are <b>unavoidable...</b>
{@advisorEcolHill}    But we can limit them if we <b>prevent phosphorus runoff!</b>
{@advisorEcolHill}    I'll keep an eye out for any excess runoff...
$call QueueDialogueBubble(region2_grain1, region2.bloomRumors)
$call OffsetAlgaeGrowthThreshold(1)
$call UnpauseAlertType("ExcessRunoff")
$call AddAutoAlertCondition("ExcessRunoff", 1)
// $call Unpause()

:: genericBloomTrigger
@trigger        AlertExamined
@conditions     alertType == "bloom", alertRegion == 1, global:runoffDiscovered
// @forcePolicy    Ecology
{@advisorEcolHill}      Yikes... Another algae bloom. What should we do about it?
$set local:runoffLevel = PolicyLevelInRegion(1, "RunoffPolicy")
$if local:runoffLevel < 1
    {@advisorEcolHill}      We could address the causes by penalizing farms for letting manure sit in the fields.
$elseif local:runoffLevel < 3
    {@advisorEcolHill}      Maybe our runoff fine isn't high enough.
$endif
$if PolicyIsUnlocked("SkimmingPolicy"), PolicyLevelInRegion(1, "SkimmingPolicy") < 1
    {@advisorEcolHill}      Or we could use skimmers to clean up.
$endif
{viewpoliciesnext}
{@advisorEcolHill}     Your choice, boss.
$call ForcePolicyInstant("Ecology")

// TODO: add event/trigger for city stress (nearby bloom and/or lacking milk)

:: SellAtLossCafo
@trigger        AlertExamined
@conditions     alertType == "selling-loss", alertRegion == 1, isFromGrainFarm == false
// $call Pause()
{local @cafoFarmer}     My farm is losing money... At this rate, I'll have to slow down milk production!
{@advisorEconHill}      Hmm... Bertram here is in a rough spot.
{@advisorEconHill}      If we want to keep business running smoothly, we'd best find a way to lower costs.
{viewpoliciesnext}
$set local:runoffLevel = PolicyLevelInRegion(1, "RunoffPolicy")
$set local:taxLevel = PolicyLevelInRegion(1, "SalesTaxPolicy")
$if local:runoffLevel > 0
    {@advisorEconHill}      I would suggest ditching that runoff fine.
    {@advisorEcolHill}      And let Bertram pollute? I'm not so sure...
    $call ForcePolicyInstant("Ecology")
$elseif local:taxLevel > 0, local:taxLevel < 3
    {@advisorEconHill}      That sales tax may be squeezing him. Can we do without the revenue?
    {@advisorEconHill}      A <b>Subsidy</b> could relieve his issues, but it would cost us.
    $call ForcePolicyInstant("Economy")
$else
    $call ForcePolicyInstant("Economy")
$endif
// $call Unpause()