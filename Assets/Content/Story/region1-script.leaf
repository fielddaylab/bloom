# basePath   region1

:: welcome
@trigger GameBooted
@once
$call Pause()
{local @advisorEcon}    Greetings. Let's get right to business, shall we?
{local @advisorEcon}    These troublesome algae blooms have been appearing all over. 
{local @advisorEcon}    I'm here to fill you in on the market conditions driving this trend.
{local @advisorEcon}    It starts with the Grain Farms: they import mineral phosphorus to fertilize their fields.
{local @advisorEcon}    The Dairy Farms will buy their grain to feed cows... 
{local @advisorEcon}    But then their phosphorus-filled manure runs into the lakes.
{local @advisorEcon}    Seems to me they could help each other out, no?
{local @advisorEcon}    Start by opening your Funding menu to connect these farms with a Road.
$call Unpause()


// Step 2: Road drawing tutorial
:: roadSelected
@trigger BuildButtonPressed
@once
{local @advisorEcon}    Mmm, yes. Press the button.

// Step 3: Introduce cities
:: farmsConnected
@trigger    FarmConnection
@once
$call Pause()
$if intro:citiesConnected
    {local @advisorEcon}    Nice work! The grain farm is hooked up with the dairy farm, and the dairy farm with the city.
    {local @advisorEcon}    The great milk-money conversions are underway.
$else
    // Step 4: Connect city and dairy
    {local @advisorEcon}    That's a well-built road, that.
    {local @advisorEcon}    But now the city needs milk.
    {local @advisorEcon}    Build another road between the dairy farm and the city.
$endif
$call Unpause()
$set intro:farmsConnected = true

:: cityConnected
@trigger    CityConnection
@once
$call Pause()
$if intro:farmsConnected
    {local @advisorEcon}    Nice work! The city is hooked up with the dairy farm, and the dairy farm with the grain farm.
    {local @advisorEcon}    The great milk-money conversions are underway.
$else
    // Step 4: Connect city and dairy
    {local @advisorEcon}    That's a well-built road, that.
    {local @advisorEcon}    But now the dairy farm needs grain to produce milk.
    {local @advisorEcon}    Build another road between the dairy farm and the grain farm.
$endif

$call Unpause()
$set intro:citiesConnected = true

:: sittingOmens
@trigger        LetSat
@once
$call Pause()
{local @advisorEcol}    It looks like this dairy farm is letting its manure sit and run off.
{local @advisorEcon}    Indeed. You'll have to make it favorable for them to send it to a grain farm.
{local @advisorEcon}    Make sure there's a road connecting them, and that shipping is cheaper than allowing runoff.
{local @advisorEcol}    This could have ramifications for lake health down the line...
$call Unpause()

:: testEcologyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Ecology"
@forcePolicy    Ecology
{local @advisorEcol}    Hey there boss! Here to check out some policies?

:: testEconomyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Economy"
@forcePolicy    Economy
{local @advisorEcon}    Here are the economic policies.

:: testRunoffTrigger
@trigger        AlertExamined
@conditions     alertType == "excess-runoff"
@forcePolicy    Ecology
@queued
$call Pause()
{local @grainFarmer}    Goodness gracious. This manure just slips off my fields.
{local @advisorEcol}    There has been excessive runoff!
{local @advisorEcol}    Looks like it's still cheaper for the dairy farm to let the manure sit.
{local @advisorEcol}    We've been authorized to implement a penalty for allowing manure runoff.
{local @advisorEcon}    That could incentivize selling, but if it's too high it'll disrupt the supply chain.
{local @advisorEcol}    What do you think, boss?
$call UnlockCards(RunoffPolicy)
$call Unpause()

:: testBloomTrigger
@trigger        AlertExamined
@conditions     alertType == "bloom"
@forcePolicy    Ecology
@once
$call Pause()
{local @advisorEcol}    Oh dear. We're getting algae blooms here in our lake.
{local @advisorEcol}    We've been authorized to implement a runoff penalty to disincentivize sitting manure.
$call UnlockCards(RunoffPolicy)
$call Unpause()


:: testSellAtLossTrigger
@trigger        AlertExamined
@conditions     alertType == "selling-loss"
@forcePolicy    Economy
@queued
$call Pause()
{local @grainFarmer}    My best option still loses me money... How am I gonna feed my family?
{local @advisorEcon}    This supplier is selling at a loss.
{local @advisorEcon}    If we want to keep business running smoothly, we'd best decrease costs.
$call Unpause()


:: testRegionUnlocked
@trigger        RegionUnlocked
@conditions     regionId == "Prairie"
@queued
$call Pause()
{@advisorEconPrairie}    Howdy there!
{@advisorEconPrairie}    We've heard about your program over here in Prairie County.
{@advisorEconPrairie}    We think it shows promise. Maybe we could coordinate to address this muck together? 
$call Unpause()