# basePath   region1

:: welcome
@trigger GameBooted
@conditions     intro:tutorialComplete = false
@cutscene
@once
// $call Pause()
$call PauseAlertType("ExcessRunoff")

$call CutsceneBegin()
    $call CutscenePrepareImages("intro/frame1-1.png", "intro/frame1-2.png", "intro/frame1-3.png")
    $call CutsceneAllImages(0.5)
    You are assigned the Director of the region's Sustainable Agricultural Growth Administration: SAGA.
    $call CutscenePrepareImages("intro/frame2-1.png", "intro/frame2-2.png", "intro/frame2-3.png")
	$call CutsceneAllImages(0.5)
	This region is young. It's your job as SAGA director to help them grow...
	$call CutscenePrepareImages("intro/frame3-1.png", "intro/frame3-2.png", "intro/frame3-3.png")
	$call CutsceneAllImages(0.5)
	If you fail, they will succumb to ruin. Cities will empty; people will starve; the land and the waterways will be become desolate.
	$call CutscenePrepareImages("intro/frame4-1.png", "intro/frame4-2.png", "intro/frame4-3.png")
	$call CutsceneAllImages(0.5)
	Your first assignment is <i>Knoll County</i>. You will meet two guides...
$call CutsceneEnd()

{@advisorEconHill}      Greetings! Welcome to Knoll County.
$call ForceDialogueInteraction()
{@advisorEconHill}      I'm here to advise you on money matters. 
{@advisorEconHill}      Knoll County is growing...
{@advisorEconHill}      ...but these farms and businesses aren't connected.
$call PanToBuilding("region1_city1")
{@advisorEconHill}      There's the <i>City</i> of Pendleton Hills...
$call PanToBuilding("region1_grain1")
{@advisorEconHill}      Henrietta's <i>Grain Farm</i>...
$call PanToBuilding("region1_cafo1")
{@advisorEconHill}      And Bertram's <i>Dairy Farm</i>.
{@advisorEcolHill}      Well, it's a bit more than just a "dairy farm," its a huge operation.
{@advisorEcolHill}      I'll be informing you on environmental concerns, by the way.
{@advisorEconHill}      Yes, thank you. But back to <i>important</i> things. Like establishing trade routes!
$call ReleaseDialogueInteraction()
$call FocusHighlightOn("BuildModeButton")
{@advisorEconHill}      Open <b>Build Mode</b>.
$call FocusClear()
$call Unpause()


// Step 2: Road drawing tutorial
:: roadSelected
@trigger BuildButtonPressed
@conditions     intro:tutorialComplete = false
@cutscene
@once
{@advisorEconHill}      Each road segment costs $5. 
{@advisorEconHill}      You will see a running total of your costs as you build.
{@advisorEcolHill}      You can't build over any of our protected forests or deep water.
{@advisorEconHill}      Select your <i>Road</i> tool and build a road between the <i>Grain Farm</i> to the <i>Dairy Farm</i>.
$call PanToBuildingOffset("region1_grain1", -1)
$call ShowAnimatedTutorial("ClickDragTutorial")


// Step 3: Introduce cities
:: farmsConnected
@trigger    FarmConnection
@conditions     intro:tutorialComplete = false
@cutscene
@once
// $call Pause()
$set intro:farmsConnected = true
$if intro:citiesConnected
    $call HideAnimatedTutorial()
    $call ForceDialogueInteraction()
    {@advisorEconHill}      Now the Dairy Farm can buy <i>grain</i> from the Grain Farm.
    {@advisorEconHill}      And the Grain Farm can buy <i>manure</i> for fertilizer.
    {@advisorEconHill}      Its the beginning of our local <i>Fertilizer Economy</i>.
    {local @grainFarmer}    Pippin, will this help us save some money? 
    {local @cafoFarmer}     Yeah, I'm going broke here. It would be great to turn manure into money. 

    $branch .farmsAndCitiesConnected
$else
    // Step 4: Connect city and dairy
    // {@advisorEconHill}   Now the Grain Farm can buy <i>manure</i> from the Dairy Farm.
    {@advisorEconHill}      Now Bertram can buy Henreitta's <i>grain</i> for his cows...
    {@advisorEconHill}      and the fine people of Pendleton Hills buy the <i>milk</i>.
    $if !intro:citiesConnected 
        $call PanToBuilding("region1_city1")
        {@advisorEconHill}      We need a <i>Road</i> to connect the Dairy Farm to the City.
    $endif
$endif
// $call Unpause()

:: cityConnected
@trigger    CityConnection
@conditions     intro:tutorialComplete = false
@cutscene
@once
// $call Pause()
$set intro:citiesConnected = true
$if intro:farmsConnected
    $call HideAnimatedTutorial()
    $call ForceDialogueInteraction()
    {@advisorEconHill}      Excellent! The the City has a source of <i>milk</i>!
    $branch .farmsAndCitiesConnected
$else
    // Step 4: Connect dairy and grain
    {@advisorEconHill}      With this road, the City can purchase Bertram's <i>milk</i>.
    {@advisorEconHill}      But cows need <i>grain</i> to make milk...
    $call PanToBuilding("region1_grain1")
    {@advisorEconHill}      Build another road between the Dairy Farm and the Grain Farm.
$endif

// $call Unpause()

:: farmsAndCitiesConnected 
@conditions     intro:tutorialComplete = false
@once
@cutscene
$set intro:farmsAndCities = true
$call HideAnimatedTutorial()
{@advisorEconHill}      Everything in the county is connected.
{@advisorEconHill}      The city income taxes give SAGA a budget. 
{@advisorEconHill}      But SAGA may need more funding.
{@advisorEconHill}      I've unlocked the Sales Tax policy.
$call UnlockCards(SalesTaxPolicy)
{@advisorEconHill}      See me again from your <b>Economic Advisor</b> button.
$call ForceCloseDialogue()
$call Wait(0.4)
$call FocusHighlightOn("EconomyAdvisor")
$call ReleaseDialogueInteraction()

:: wrongAdvisor
@trigger AdvisorOpened
@conditions     advisorType == "Ecology", intro:farmsAndCities, intro:tutorialComplete = false
@cutscene
$call FocusClear()
{@advisorEcolHill}      Hey there!
{@advisorEcolHill}      I think Pippin wanted to talk to you.
{@advisorEcolHill}      His <b>Economic Advisor</b> button has a gem on it. Pretty ostentatious if you ask me...
$call FocusHighlightOn("EconomyAdvisor")

:: letsGetStarted
@trigger AdvisorOpened
@conditions     advisorType == "Economy", intro:farmsAndCities, intro:tutorialComplete == false
@forcePolicy    Economy
@cutscene
@once
$call FocusClear()
$set intro:pendingPolicy = true
{@advisorEconHill}     You can adjust Knoll County's policies here.
{@advisorEconHill}     Sales Policy can provide additional revenue.
{viewpoliciesnext}
{@advisorEconHill}     But set it too high, and trade may be hindered.

:: closedWithoutSettingPolicy
@trigger    AdvisorClosed
@conditions intro:pendingPolicy == true, intro:tutorialComplete == false
@forcePolicy    Economy
@cutscene
{@advisorEconHill}      Hold on there!
{@advisorEconHill}      Make sure to set a Sales Policy before you leave.
{viewpoliciesnext}
{@advisorEconHill}      You can set it to None if you like, but we ought to decide.

// :: setPolicyReminder
// @trigger AdvisorOpened
// @conditions advisorType == "Economy", intro:farmsAndCities, intro:tutorialComplete == false, Visited("region1.letsGetStarted")
// @forcePolicy    Economy
// $call FocusClear()
// {viewpoliciesnext}
// {@advisorEconHill}      Choose a Sales Policy and we can continue.

:: policySet
@trigger        PolicySet
@conditions     policyForced == false
@cutscene
$set intro:pendingPolicy = false
$branch .policyDescriptions
$if intro:tutorialComplete = false
    $branch .choseFirstPolicy
$endif

:: policyForcedToZero
@trigger        PolicySet
@conditions     policyIndex == 0, policyForced == true
@cutscene
$if local:policyType == "SalesTaxPolicy"
    {local @advisorEcon}    Oh dear.
    {local @advisorEcon}    The sales subsidy here is costing too much. The county is out of money. 
    {local @advisorEcon}    I must set it to none for now.
$elseif local:policyType == "ImportTaxPolicy"
    {local @advisorEcon}    Oh dear.
    {local @advisorEcon}    The import subsidy here is costing too much. The county is broke. 
    {local @advisorEcon}    I must set it to none for now.
$elseif local:policyType == "SkimmingPolicy"
    {local @advisorEcol}    Jeepers!
    {local @advisorEcol}    Our lake cleanup policy is costing too much. The county budget has run dry!
    {local @advisorEcol}    I'll have to set it to none for now.
$endif
{local @advisorEcon}    I recommend you implement a tax so we can get some funding.

:: choseFirstPolicy
// @cutscene
$set intro:tutorialComplete = true
{@advisorEconHill}  A fine choice. 
{@advisorEconHill}  Let's get this economy started, shall we?
$call PauseUser()
{@advisorEconHill}  Use the <b>spacebar</b> to toggle pause.
$call ShowAnimatedTutorial("PauseTutorial")
$call OffsetAlgaeGrowthThreshold(0)
$call ActivateSim()

// :: sittingOmens
// @trigger        LetSat
// @conditions     intro:citiesConnected, intro:farmsConnected
// @once
// $call Pause()
// $call PanToBuilding("region1_cafo1")
// {@advisorEcolHill}      This dairy farm is letting manure sit.
// {@advisorEcolHill}  It is sinking into the groundwater and will run off into the lakes. 
// {@advisorEconHill}      Indeed. They simply have no more favorable alternatives.
// {@advisorEcolHill}      This could be bad for the future of the lakes...
// $call Unpause()

:: specialDelivery
@trigger    ExternalImport
// @conditions !intro:exporterFound
@cutscene
@once
// $call Pause()
// $set intro:exporterFound = true
$call PanToBuilding("region1_grain1")
{@advisorEconHill}      Ho! Special delivery!
{@advisorEconHill}      Henrietta's Grain Farm imported some <i>fertilizer</i>.
{local @grainFarmer}    I love <b>Phos4Us</b>! My crops need phosphorus to grow...
{local @grainFarmer}    ...and its cheap to ship to my farm.
{@advisorEcolHill}      Hold on! We are adding MORE nutrients to our county?
{@advisorEcolHill}      This could disrupt the ecological balance!
$call AddAutoAlertCondition("Bloom", 1)
{@advisorEconHill}      I'm afraid this is the only economically feasible option.
// $call Unpause()


:: skipTutorial
@trigger    TutorialSkipped
$call CutsceneEnd()
$call FocusClear()
{@advisorEconUrban}    Heheh, you've skipped the tutorial! Far out.
$call SendGlobalAlertForNode("region1_city1", region1.testGlobalAlert)
$call HideAnimatedTutorial()
$set intro:tutorialComplete = true
$set intro:pendingPolicy = true
$call UnlockCards(SalesTaxPolicy)
$call AddAutoAlertCondition("Bloom", 1)
$call OffsetAlgaeGrowthThreshold(0)
$call ReleaseDialogueInteraction()
// $call Unpause()
$call ActivateSim()

:: testGlobalAlert
@queued
{local  @urbanite}  I hear you've skipped the tutorial... pretty cool.

:: ecologyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Ecology", CameraInRegion(1), intro:tutorialComplete
// @forcePolicy    Ecology
$if PolicyIsUnlocked(RunoffPolicy)
    $call ForcePolicyInstant("Ecology")
    {local @advisorEcol}    Hey there, boss! Here to check out some policies?
$else
    {local @advisorEcol}    Hey there! No policies to assign yet.
$endif

:: economyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Economy", CameraInRegion(1), intro:tutorialComplete
// @forcePolicyEarly    Economy
$if PolicyIsUnlocked(SalesTaxPolicy)
    $call ForcePolicyInstant("Economy")
    {local @advisorEcon}    Here are the economic policies.
$else
    {local @advisorEcon}    Greetings. Once we have economic policies to set, you can come see me.
$endif

:: policyDescriptions
// TODO: lookup policy costs
$if local:policyType == "RunoffPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcol}    With no runoff fine, Dairy Farms will only sell manure if it earns a profit.
    $elseif local:policyIndex == 1
        {local @advisorEcol}    With a low runoff fine, Dairy Farms will sell manure if the loss is less than $8 per unit.
    $elseif local:policyIndex == 2
        {local @advisorEcol}    With a high runoff fine, Dairy Farms will sell manure if the loss is less than $16 per unit.
    $elseif local:policyIndex == 3
        {local @advisorEcol}    With a very high runoff fine, Dairy Farms will try to sell manure, even if it loses money.
    $endif
$elseif local:policyType == "SkimmingPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcol}    With no Lake Cleanup, you aren't doing anything to remove algae from the lakes. 
    $elseif local:policyIndex == 1
        {local @advisorEcol}    Low Lake Cleanup policy will clear algae from 1 water area for a recurring $1 cost.
        {local @advisorEcol}    But this won't remove all the phosphorus!
    $elseif local:policyIndex == 2
        {local @advisorEcol}    High Lake Cleanup policy will clear algae from 2 water areas for a recurring $2 cost.
        {local @advisorEcol}    But this won't remove all the phosphorus!
    $elseif local:policyIndex == 3
        {local @advisorEcol}    Dredging will clear algae from 3 water areas <b>and</b> remove some phosphorus.
        {local @advisorEcol}    But it will cost a recurring $4!
    $endif
$elseif local:policyType == "SalesTaxPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcon}    Even without Sales Tax, you'll gain $5 for each milk shipment the city consumes.
    $elseif local:policyIndex == 1
        {local @advisorEcon}    With low Sales Tax, you'll gain $2 with every purchase on top of city revenue.
    $elseif local:policyIndex == 2
        {local @advisorEcon}    With high Sales Tax, you'll gain $4 with every purchase on top of city revenue.
    $elseif local:policyIndex == 3
        {local @advisorEcon}    Sales Subsidy costs you $2 for every purchase except for fertilzer from Phos4Us. Subsidies encourages buyers.
        {local @advisorEcon}    But that money comes from the SAGA county budget!
    $endif
$elseif local:policyType == "ImportTaxPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcon}    With no Import Policy, we won't offset any shipping costs.
    $elseif local:policyIndex == 1
        {local @advisorEcon}    With a Milk Subsidy, we'll pay $6 for each milk imported to offset shipping costs.
    $elseif local:policyIndex == 2
        {local @advisorEcon}    With a Grain Subsidy, we'll pay $6 for each grain imported to offset shipping costs.
    $elseif local:policyIndex == 3
        {local @advisorEcon}    With a Fertilizer Subsidy, we'll pay $6 for each manure or digester fertilizer imported to offset shipping costs.
    $endif
$endif

:: openedToForest
@trigger        AdvisorOpened
@conditions     advisorType == "Economy", CameraInRegion(1), RegionUnlocked(2)
@priority       High
// @forcePolicy    Economy
@once
$call ForcePolicyInstant("Economy")
{@advisorEconHill}      Ah, you've expanded into Cypress County. Lucky you.
{@advisorEconHill}      Now you can be <i>condescended to</i> while surrounded by natural splendor.
{@advisorEconHill}      Hope you like the smell of old mushrooms.

:: openedToPrairie
@trigger        AdvisorOpened
@conditions     advisorType == "Ecology", CameraInRegion(1), RegionUnlocked(3)
@priority       High
@forcePolicy    Ecology
@once
{@advisorEcolHill}      Ugh... Those Heath County hayseeds always irked me.
{@advisorEcolHill}      They think they're better than everyone because of their fancy college.
{@advisorEcolHill}      Plus their straw hats are weird!
{viewpoliciesnext}
{@advisorEcolHill}      Anyway, what can I help you with?


// :: preBloomRunoff
// @trigger        AlertExamined
// @conditions     alertType == "excess-runoff", CameraInRegion(1)
// @once
// {local @advisorEcol}    Hold on... This farm is just letting manure sit around!
// {local @advisorEcon}    An astute observation. What would you have them do with it?
// {local @advisorEcol}    Well, it's got phosphorus. Why not make use of it?
// {local @advisorEcon}    Who would pay to ship around truckloads of poop when there's Phos 4 Us?
// {local @advisorEcol}    Hmm...


:: runoffTrigger
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", alertRegion == 1, isFromGrainFarm == false
@forcePolicy    Ecology
@queued
@cutscene
@once
// $call Pause()
$set global:runoffDiscovered = true
{@advisorEcolHill}      This farm is just letting manure leach into the water table!
{@advisorEcolHill}      That must be behind those algae blooms.
{@advisorEconHill}      Maybe so, but they simply have no more favorable alternatives.
{@advisorEcolHill}      Well, let's make it less favorable. How about a <b>fine</b> for runoff?
$call UnlockCards(RunoffPolicy)
{local @cafoFarmer}     A fine!? I'm barely scraping by as is. You'd have me selling at a loss!
{@advisorEconHill}      Hrm... A fine <i>could</i> incentivize selling manure...
{@advisorEconHill}      But Bertram is correct. Selling at a loss could disrupt the supply chain.
{viewpoliciesnext}
{@advisorEcolHill}      What do you think, boss?

:: genericRunoff
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", alertRegion == 1, global:runoffDiscovered, isFromGrainFarm == false
@queued
// $call Pause()
{local @advisorEcol}    More runoff... 
$if PolicyLevelInRegion(1, "RunoffPolicy") < 3
    {@advisorEcolHill}      Maybe we ought to increase our runoff fine?
    {@advisorEconHill}      Careful now! We don't want to bankrupt our farmers.
    {@advisorEconHill}      We just need to give them a more favorable option.
$else
    {@advisorEcolHill}      Our runoff fine is high as can be...
    {@advisorEconHill}      Perhaps this farm needs a manure buyer.
$endif
$if Visited("region2.unlockStorage")
    {local @advisorEcon}    Or we could build a <b>Storage</b> unit.
$endif

:: grainRunoff
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", global:runoffDiscovered, isFromGrainFarm == true
{local @advisorEcol}        Runoff from a grain farm...
{local @advisorEcol}        All fertilizer causes <i>some</i> runoff... 
{local @advisorEcol}        But mineral fertilizer from Phos4Us tends to be overapplied.
{local @grainFarmer}        It's the cheapest option I've got!
{local @advisorEcol}        Maybe we can find a manure seller nearby.
$if global:builtDigester
    {local @advisorEcol}        Or better yet, some digested fertilizer!
$endif


:: discoverFirstBloom
@trigger        AlertExamined
@cutscene
@conditions     alertType == "bloom", alertRegion == 1 
@once
// $call Pause()
$set global:bloomDiscovered = true
// TODO: trigger ACT 2 HERE.
{@advisorEcolHill}    What's this...?
$call CutsceneBegin()
    $call CutscenePrepareImages("act2/2-1-1.png", "act2/2-1-2.png", "act2/2-1-3.png")
    $call CutsceneAllImages(0.5)
    Something is wrong with the lakes. They are filled with revolting green algae! This can't be safe for our ecosystem.
    $call CutscenePrepareImages("act2/2-2-1.png", "act2/2-2-2.png", "act2/2-2-3.png")
	$call CutsceneAllImages(0.5)
	Could they grain farmers be to blame? Algae loves phosphorus, and they import phosphorus from elsewhere and overapply it!
    $call CutscenePrepareImages("act2/2-3-1.png", "act2/2-3-2.png", "act2/2-3-3.png")
	$call CutsceneAllImages(0.5)
	Or the dairy farmers? Their cows' phosphorus-filled manure runs off into the lakes too! But it's expensive to ship elsewhere...
    $call CutscenePrepareImages("act2/2-4-1.png", "act2/2-4-2.png", "act2/2-4-3.png")
	$call CutsceneAllImages(0.5)
	Both make good points... But our cities need milk. You - and SAGA - will need to take action.
$call CutsceneEnd()
{@advisorEcolHill}    Something must be done! I'll keep an eye out for any phosphorus runoff.
$call OffsetAlgaeGrowthThreshold(1)
$call UnpauseAlertType("ExcessRunoff")
$call AddAutoAlertCondition("ExcessRunoff", 1)
// $call Unpause()

:: genericBloomTrigger
@trigger        AlertExamined
@conditions     alertType == "bloom", alertRegion == 1, global:runoffDiscovered
@forcePolicy    Ecology
{@advisorEcolHill}      Yikes... Another algae bloom. What should we do about it?
$set local:runoffLevel = PolicyLevelInRegion(1, "RunoffPolicy")
$if local:runoffLevel < 1
    {@advisorEcolHill}      We could address the causes by penalizing farms for letting manure sit in the fields.
$elseif local:runoffLevel < 3
    {@advisorEcolHill}      Maybe our runoff fine isn't high enough.
$endif
$if PolicyLevelInRegion(1, "SkimmingPolicy") < 1
    {@advisorEcolHill}      Or we could use skimmers to clean up.
$endif
{viewpoliciesnext}
{@advisorEcolHill}     Your choice, boss.

// TODO: add event/trigger for city stress (nearby bloom and/or lacking milk)

:: SellAtLossGrain
@trigger        AlertExamined
@conditions     alertType == "selling-loss", isFromGrainFarm == true
@forcePolicy    Economy
// $call Pause()
{local @grainFarmer}      Aw shucks... How am I gonna feed my family?
{local @advisorEcon}      Hmm... This farmer is losing money when they sell.
{local @advisorEcon}      I suspect their phosphorus source is too expensive. 
{local @advisorEcon}      Perhaps you can build a shorter road to decrease shipping costs.
$set local:taxLevel = PolicyLevelInRegion(1, "SalesTaxPolicy")
$if local:taxLevel > 0
    $if local:taxLevel < 3
    {local @advisorEcon}    Or set a more favorable tax policy.
    $endif
$endif
$if global:builtDigester
    {local @advisorEcon}  Otherwise, that <i>Digested Fertilizer is cheaper to ship...
$endif
{viewpoliciesnext}
{local @advisorEcon}    It's your choice, Director.     
// $call Unpause()

:: SellAtLossCafo
@trigger        AlertExamined
@conditions     alertType == "selling-loss", alertRegion == 1, isFromGrainFarm == false
@forcePolicy    Economy
// $call Pause()
{local @cafoFarmer}     My farm is losing money... At this rate, I'll have to slow down milk production!
{@advisorEconHill}      Hmm... Bertram here is in a rough spot.
{@advisorEconHill}      If we want to keep business running smoothly, we'd best find a way to lower costs.
{viewpoliciesnext}
$set local:runoffLevel = PolicyLevelInRegion(1, "RunoffPolicy")
$if local:runoffLevel > 0
    {@advisorEconHill}      I would suggest ditching that runoff fine.
    {@advisorEcolHill}      And let Bertram pollute? I don't approve...
$endif
$set local:taxLevel = PolicyLevelInRegion(1, "SalesTaxPolicy")
$if local:taxLevel > 0
    $if local:taxLevel < 3
    {@advisorEconHill}      That sales tax may be squeezing him. Can we do without the revenue?
    $endif
$endif
// $call Unpause()


:: GameFailed
@trigger        GameFailed
@conditions     FailureIsEnabled()
@cutscene
$if FailureIsEnabled()
{local @advisorEcon}    You failed D:
{local @advisorEcon}      {$local:endType} in region {$local:regionIndex}
$call CutsceneBegin()
	$call CutscenePrepareImages("intro/frame3-1.png", "intro/frame3-2.png", "intro/frame3-3.png")
	$call CutsceneAllImages(0.5)
	Your efforts were not enough. You have been replaced as SAGA director. Perhaps your replacement will fare better...
    Proper shutdown is not implemented. Reload the page to start again.
    // $call EndGame()
// {@advisorEconUrban}      Heh heh, you would've failed here, but failure was disabled. Right on.
// {@advisorEconUrban}      {$local:endType} in region {$local:regionIndex}
$endif

:: GameCompleted
@trigger       GameCompleted
@conditions    FailureIsEnabled()
@cutscene
{local @advisorEcon}    You won :D Yippee!
$call CutsceneBegin()
	$call CutscenePrepareImages("intro/frame2-1.png", "intro/frame2-2.png", "intro/frame2-3.png")
	$call CutsceneAllImages(0.5)
	With your help, these regions are blooming into a thriving interconnected economy.
    Perhaps we couldn't stop the blooms entirely, but by activating a fertilizer market, we've kept them managed.
    Proper shutdown is not implemented. Reload the page to start again.
    // $call EndGame()