# basePath   region1

:: welcome
@trigger GameBooted
@once
$call Pause()
{@advisorEconHill}    Greetings. Let's get right to business, shall we?
{@advisorEconHill}      Our lovely <i>Hillside Region</i> is a chunk of blooming real estate with three buildings:
$call PanToBuilding("region1_city1");
{@advisorEconHill}      A <i>City</i>...
$call PanToBuilding("region1_cafo1");
{@advisorEconHill}      A <i>Dairy Farm</i>...
$call PanToBuilding("region1_grain1");
{@advisorEconHill}      And a <i>Grain Farm</i>.
{@advisorEconHill}      But something else is required before it can truly be considered an economy... <i>Roads</i>!
{@advisorEconHill}      Start by opening your <i>Funding</i> menu to connect these your two farms with a <i>Road</i>.
$call Unpause()


// Step 2: Road drawing tutorial
:: roadSelected
@trigger BuildButtonPressed
@once
{@advisorEconHill}      With your <i>Road</i> tool selected, click and drag from the source to the destination. 
{@advisorEconHill}      But each tile will spend from our regional budget! Try to be thrifty.


// Step 3: Introduce cities
:: farmsConnected
@trigger    FarmConnection
@once
$call Pause()
$set intro:farmsConnected = true
$if intro:citiesConnected
    {@advisorEconHill}      Nice work! Now the Dairy Farm can buy <i>grain</i> from the Grain Farm to produce <i>milk</i> and <i>manure</i>.
    {@advisorEconHill}      And the Grain Farm can buy <i>manure</i> from the Dairy Farm to produce <i>grain</i>.
    $branch .farmsAndCitiesConnected
$else
    // Step 4: Connect city and dairy
    {@advisorEconHill}      That's a well-built road, that.
    {@advisorEconHill}      Now the Grain Farm can buy <i>manure</i> from the Dairy Farm to produce <i>grain</i>.
    {@advisorEconHill}      And the Dairy Farm can buy <i>grain</i> from the Grain Farm to produce <i>milk</i>.
    {@advisorEconHill}      But who buys the <i>milk</i>, you ask? That'll be the City!
    $call PanToBuilding("region1_city1");
    {@advisorEconHill}      Build another <i>Road</i> connecting the Dairy Farm and the City.
$endif
$call Unpause()

:: cityConnected
@trigger    CityConnection
@once
$call Pause()
$set intro:citiesConnected = true
$if intro:farmsConnected
    {@advisorEconHill}      Nice work! Now the the City can buy <i>milk</i> from the Dairy Farm and turn it into <i>money</i> using TAX MAGIC!
    $branch .farmsAndCitiesConnected
$else
    // Step 4: Connect dairy and grain
    {@advisorEconHill}      Uh-- hmm. I suppose we can start with the City. I'm not picky about these things.
    {@advisorEconHill}      With this road, the City can purchase <i>milk</i> from the Dairy Farm to produce <i>money</i>.
    {@advisorEconHill}      But how does a Dairy Farm make the <i>milk</i>, you ask? They trade with a Grain Farm!
    $call PanToBuilding("region1_grain1");
    {@advisorEconHill}      Build another road between the Dairy Farm and the Grain Farm.
$endif

$call Unpause()

:: farmsAndCitiesConnected 
$call ActivateSim()
{@advisorEconHill}      Your Grain Farm is hooked up with the Dairy Farm, and the Dairy Farm with the City.
{@advisorEconHill}      Now you can start optimizing your <i>manure</i> sources to produce more <i>milk</i> and <i>money</i>!
{@advisorEconHill}      Aren't supply chains just WONDERFUL? Agh, I'm getting a bit teary over here.

:: sittingOmens
@trigger        LetSat
@conditions     intro:citiesConnected, intro:farmsConnected
@once
$call Pause()
$call PanToBuilding("region1_cafo1")
{@advisorEcolHill}     It looks like this dairy farm is letting its manure sit and run off.
{@advisorEconHill}      Indeed. You'll have to make their alternatives more favorable.
{@advisorEconHill}      Namely, either a Storage unit or a Grain Farm.
{@advisorEconHill}      Make sure there's a road connecting them, and that shipping is cheaper than allowing runoff.
{@advisorEcolHill}      This could have ramifications for lake health down the line...
$call Unpause()

:: specialDelivery
@trigger    ExternalImport
@once
$call Pause()
$call PanToBuilding("region1_grain1");
{@advisorEconHill}      Ho! Special delivery!
{@advisorEconHill}      Your Grain Farm imported some <i>commercial fertilizer</i> from an outside supplier called Moose Minerals.
{@advisorEconHill}      Guess it's cheaper than any local manure options. Or local supply isn't enough to cover 100% of the requests.
{@advisorEcolHill}      Commercial fertilizer may be cheaper, but it also results in more phosphorus runoff when it's applied.
$call Unpause()

:: testEcologyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Ecology"
@forcePolicy    Ecology
{local @advisorEcol}    Hey there boss! Here to check out some policies?

:: testEconomyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Economy"
@forcePolicy    Economy
{local @advisorEcon}    Here are the economic policies.

:: runoffTrigger
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", intro:citiesConnected, intro:farmsConnected
@forcePolicy    Ecology
@queued
@once
$call Pause()
{local @grainFarmer}    Goodness gracious. This manure just slips off my fields.
{local @advisorEcol}    There has been excessive runoff!
{local @advisorEcol}    Looks like it's still cheaper for the dairy farm to let the manure sit.
{local @advisorEcol}    We've been authorized to implement a penalty for allowing manure runoff.
{local @advisorEcon}    That could incentivize selling, but if it's too high it'll disrupt the supply chain.
{local @advisorEcol}    What do you think, boss?
$call UnlockCards(RunoffPolicy)

:: testBloomTrigger
@trigger        AlertExamined
@conditions     alertType == "bloom"
@forcePolicy    Ecology
@once
$call Pause()
{local @advisorEcol}    Oh dear. We're getting algae blooms here in our lake.
{local @advisorEcol}    We've been authorized to implement a runoff penalty to disincentivize sitting manure.
$call UnlockCards(RunoffPolicy)
$call Unpause()


:: testSellAtLossTrigger
@trigger        AlertExamined
@conditions     alertType == "selling-loss"
@queued
$call Pause()
{local @grainFarmer}    My best option still loses me money... How am I gonna feed my family?
{local @advisorEcon}    This supplier is selling at a loss.
{local @advisorEcon}    If we want to keep business running smoothly, we'd best decrease costs.
$call Unpause()