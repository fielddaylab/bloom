# basePath   region1

:: welcome
@trigger GameBooted
@conditions     intro:tutorialComplete = false
@cutscene
@once
$call Pause()
$call PauseAlertType("ExcessRunoff")

$call CutsceneBegin()
    $call CutscenePrepareImages("intro/frame1-1.png", "intro/frame1-2.png", "intro/frame1-3.png")
    $call CutsceneAllImages(0.5)
    You are assigned the Director of the region's Sustainable Agricultural Growth Administration: SAGA.
    $call CutscenePrepareImages("intro/frame2-1.png", "intro/frame2-2.png", "intro/frame2-3.png")
	$call CutsceneAllImages(0.5)
	This region is young. It's your job as SAGA director to help them grow...
	$call CutscenePrepareImages("intro/frame3-1.png", "intro/frame3-2.png", "intro/frame3-3.png")
	$call CutsceneAllImages(0.5)
	If you fail, they will succumb to ruin. Cities will empty; people will starve; the land and the waterways will be become desolate.
	$call CutscenePrepareImages("intro/frame4-1.png", "intro/frame4-2.png", "intro/frame4-3.png")
	$call CutsceneAllImages(0.5)
	Your first assignment is <i>Knoll County</i>. You will meet two guides...
$call CutsceneEnd()

{@advisorEconHill}      Greetings! Welcome to Knoll County.
$call ForceDialogueInteraction()
{@advisorEconHill}      I'm here to advise you on money matters. 
{@advisorEconHill}      Knoll County is growing...
{@advisorEconHill}      ...but these farms and businesses aren't connected.
$call PanToBuilding("region1_city1")
{@advisorEconHill}      There's the <i>City</i> of Pendleton Hills...
$call PanToBuilding("region1_grain1")
{@advisorEconHill}      Henrietta's <i>Grain Farm</i>...
$call PanToBuilding("region1_cafo1")
{@advisorEconHill}      And Bertram's <i>Dairy Farm</i>.
{@advisorEcolHill}      Well, it's a bit more than just a "dairy farm," its a CAFO.
{@advisorEcolHill}      Its a huge farm. A CAFO is a <i>concentrated animal feed operation</i>.
{@advisorEcolHill}      I'll be informing you on environmental concerns, by the way.
{@advisorEconHill}      Yes, thank you. But back to <i>important</i> things. Like establishing trade routes!
$call ReleaseDialogueInteraction()
$call FocusHighlightOn("BuildModeButton")
{@advisorEconHill}      Open <b>Build Mode</b>.
$call FocusClear()
$call Unpause()


// Step 2: Road drawing tutorial
:: roadSelected
@trigger BuildButtonPressed
@conditions     intro:tutorialComplete = false
@cutscene
@once
{@advisorEconHill}      Select your <i>Road</i> tool. 
 {@advisorEconHill}     Now click and drag from the <i>grain farm</i> to the <i>CAFO</i>.
{@advisorEconHill}      Each road segment costs $5. 
{@advisorEcolHill}      You can't build over any of our protected forests or deep water.



// Step 3: Introduce cities
:: farmsConnected
@trigger    FarmConnection
@conditions     intro:tutorialComplete = false
@cutscene
@once
$call Pause()
$set intro:farmsConnected = true
$if intro:citiesConnected
    $call ForceDialogueInteraction()
    {@advisorEconHill}      Nice work! Now the CAFO can buy <i>grain</i> from the Grain Farm.
    {@advisorEconHill}      And the Grain Farm can buy <i>manure</i> for fertilizer.
    {@advisorEconHill}      Its the beginning of our Poop-Economy
    {local @grainFarmer}    Pippin, its called fertilizer.
    {local @cafoFarmer}     Yes, its my <i>fertilizer</i> business. <i>NOT </i> my poop business. That's gross.

    $branch .farmsAndCitiesConnected
$else
    // Step 4: Connect city and dairy
    {@advisorEconHill}      The <b>receipt</b> keeps a running total of your costs.
    // {@advisorEconHill}      Now the Grain Farm can buy <i>manure</i> from the Dairy Farm.
    {@advisorEconHill}      Now Bertram can buy Henreitta's <i>grain</i> for his cows...
    {@advisorEconHill}      and the fine people of Pendleton Hills buy the <i>milk</i>.
    $if !intro:citiesConnected 
        $call PanToBuilding("region1_city1")
        {@advisorEconHill}      We need a <i>Road</i> to onnect the CAFO to the City.
    $endif
$endif
$call Unpause()

:: cityConnected
@trigger    CityConnection
@conditions     intro:tutorialComplete = false
@cutscene
@once
$call Pause()
$set intro:citiesConnected = true
$if intro:farmsConnected
    $call ForceDialogueInteraction()
    {@advisorEconHill}      Excellent! Now the the City has a source of <i>milk</i>!
    $branch .farmsAndCitiesConnected
$else
    // Step 4: Connect dairy and grain
    {@advisorEconHill}      Uh-- hmm. I suppose we can start with the City. I'm not picky..
    {@advisorEconHill}      With this road, the City can purchase Bertram's <i>milk</i>.
    {@advisorEconHill}      But cows need <i>grain</i> to make milk... And Henrietta just happens to sell it!
    $call PanToBuilding("region1_grain1")
    {@advisorEconHill}      Plan another road between the CAFO and the Grain Farm.
$endif

$call Unpause()

:: farmsAndCitiesConnected 
@forcePolicy    Economy
@conditions     intro:tutorialComplete = false
@once
@cutscene
$set intro:farmsAndCities = true
{@advisorEconHill}      Now that everything is connected, we can produce <i>milk</i> Pendleton Hills.
{@advisorEconHill}      That food fuels the city. 
{@advisorEconHill}      The city income taxes give SAGA a budget. 
{@advisorEconHill}      But SAGA may need more funding to continue work in the area.
{@advisorEconHill}      I've unlocked the Sales Tax policy.
$call UnlockCards(SalesTaxPolicy)
{@advisorEconHill}      See me again from your <b>Economic Advisor</b> button. 
$call FocusHighlightOn("EconomyAdvisor")
$call ReleaseDialogueInteraction()

:: wrongAdvisor
@trigger AdvisorOpened
@conditions     advisorType == "Ecology", intro:farmsAndCities, intro:tutorialComplete = false
@cutscene
$call FocusClear()
{@advisorEcolHill}      Hey there!
{@advisorEcolHill}      I think Pippin wanted to talk to you.
{@advisorEcolHill}      His <b>Economic Advisor</b> button has a gem on it. Pretty ostentatious if you ask me...
$call FocusHighlightOn("EconomyAdvisor")

:: letsGetStarted
@trigger AdvisorOpened
@conditions     advisorType == "Economy", intro:farmsAndCities, intro:tutorialComplete = false
@forcePolicy    Economy
@cutscene
@once
$call FocusClear()
{@advisorEconHill}      Hello again.
{@advisorEconHill}      You can see me here any time to adjust Knoll County's policies!
{@advisorEconHill}      Sales Policy can provide additional revenue for infrastructure projects.
{viewpoliciesnext}
{@advisorEconHill}      But set it too high, and trade may be hindered.

:: setPolicyReminder
@trigger AdvisorOpened
@conditions advisorType == "Economy", intro:farmsAndCities, intro:tutorialComplete = false, Visited("region1.letsGetStarted")
@forcePolicy    Economy
$call FocusClear()
{@advisorEconHill}      Choose a Sales Policy and we can continue.

:: policySet
@trigger        PolicySet
@conditions     policyForced == false
@cutscene
$branch .policyDescriptions
$if intro:tutorialComplete = false
    $branch .choseFirstPolicy
$endif

:: policyForcedToZero
@trigger        PolicySet
@conditions     policyIndex == 0, policyForced == true
@cutscene
{local @advisorEcon}    Oh dear.
$if local:policyType == "SalesTaxPolicy"
    {local @advisorEcon}    The sales subsidy here has pushed our budget negative!
$elseif local:policyType == "ImportTaxPolicy"
    {local @advisorEcon}    The import subsidy here has pushed our budget negative!
$endif
{local @advisorEcon}    I must set it to none for now.
{local @advisorEcon}    Please consider implementing a tax so we can regain revenue.

:: choseFirstPolicy
// @cutscene
$set intro:tutorialComplete = true
{@advisorEconHill}  A fine choice. 
{@advisorEconHill}  Remember, you can always use the <b>spacebar</b> to pause and think.
{@advisorEconHill}  But let's get this economy started, shall we?
$call OffsetAlgaeGrowthThreshold(-2)
$call ActivateSim()

// :: sittingOmens
// @trigger        LetSat
// @conditions     intro:citiesConnected, intro:farmsConnected
// @once
// $call Pause()
// $call PanToBuilding("region1_cafo1")
// {@advisorEcolHill}      This dairy farm is letting manure sit.
// {@advisorEcolHill}  It is sinking into the groundwater and will get into the lakes. 
// {@advisorEconHill}      Indeed. They simply have no more favorable alternatives.
// {@advisorEcolHill}      This could be bad for the future of the lakes...
// $call Unpause()

:: specialDelivery
@trigger    ExternalImport
@conditions !intro:exporterFound
@cutscene
@once
$call Pause()
$set intro:exporterFound = true
$call PanToBuilding("region1_grain1")
{@advisorEconHill}      Ho! Special delivery!
{@advisorEconHill}      Henrietta's grain farm imported some <i>commercial fertilizer</i>.
{local @grainFarmer}    I love <b>Phos4Us</b>! My crops need phosphorus to grow...
{local @grainFarmer}    ...and its cheap to ship to my farm.
{@advisorEcolHill}      Hold on! We are adding MORE nutrients to our county?
{@advisorEcolHill}     This could disrupt the ecological balance!
{@advisorEconHill}      Well, I'm afraid this is the only economically feasible option.
{@advisorEcolHill}      Hm... We need to look for a better way...
$call AddAutoAlertCondition("Bloom", 1)
$call Unpause()


:: skipTutorial
@trigger    TutorialSkipped
$call CutsceneEnd()
{@advisorEconUrban}    Heheh, you've skipped the tutorial! Far out.
$set intro:tutorialComplete = true
$set intro:exporterFound = true
$call UnlockCards(SalesTaxPolicy)
$call AddAutoAlertCondition("Bloom", 1)
$call OffsetAlgaeGrowthThreshold(-2)
$call ReleaseDialogueInteraction()
$call Unpause()
$call ActivateSim()

:: ecologyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Ecology", CameraInRegion(1), intro:tutorialComplete
// @forcePolicy    Ecology
$if PolicyIsUnlocked(RunoffPolicy)
    $call ForcePolicyInstant("Ecology")
    {local @advisorEcol}    Hey there, boss! Here to check out some policies?
$else
    {local @advisorEcol}    Hey there! No policies to assign yet.
$endif

:: economyAdvisorOpen
@trigger        AdvisorOpened
@conditions     advisorType == "Economy", CameraInRegion(1), intro:tutorialComplete
// @forcePolicyEarly    Economy
$if PolicyIsUnlocked(SalesTaxPolicy)
    $call ForcePolicyInstant("Economy")
    {local @advisorEcon}    Here are the economic policies.
$else
    {local @advisorEcon}    Greetings. Once we have economic policies to set, you can come see me.
$endif



:: policyDescriptions
// TODO: lookup policy costs
$if local:policyType == "RunoffPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcol}    With no runoff fine, CAFOs will only sell manure if it earns a profit.
    $elseif local:policyIndex == 1
        {local @advisorEcol}    With a low runoff fine, CAFOs will sell manure if the loss is less than $4 per unit.
    $elseif local:policyIndex == 2
        {local @advisorEcol}    With a low runoff fine, CAFOs will sell manure if the loss is less than $8 per unit.
    $elseif local:policyIndex == 3
        {local @advisorEcol}    With a very high runoff fine, CAFOs will try to sell manure, even if it loses money.
    $endif
$elseif local:policyType == "SkimmingPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcol}    With no skimming, algae will stick around until phosphorus decreases.
    $elseif local:policyIndex == 1
        {local @advisorEcol}    Low skimming will clear algae from 1 water area for $1 each tick.
        {local @advisorEcol}    But the phosphorus remains!
    $elseif local:policyIndex == 2
        {local @advisorEcol}    High skimming will clear algae from 2 water areas for $2 each tick.
        {local @advisorEcol}    But the phosphorus remains!
    $elseif local:policyIndex == 3
        {local @advisorEcol}    Dredging will clear algae from 3 water areas <b>and</b> remove some phosphorus.
        {local @advisorEcol}    But it will cost $4 each tick!
    $endif
$elseif local:policyType == "SalesTaxPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcon}    Even without sales tax, you'll gain $5 for each milk shipment the city consumes.
    $elseif local:policyIndex == 1
        {local @advisorEcon}    With low sales tax, you'll gain $2 with every purchase on top of city revenue.
    $elseif local:policyIndex == 2
        {local @advisorEcon}    With high sales tax, you'll gain $4 with every purchase on top of city revenue.
    $elseif local:policyIndex == 3
        {local @advisorEcon}    With a sales subsidy, your funds will incentivize buying with $4 for every purchase.
    $endif
$elseif local:policyType == "ImportTaxPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcon}    With no import policy, goods will generally go to the nearest buyer.
    $elseif local:policyIndex == 1
        {local @advisorEcon}    A low <b>import subsidy</b> will gently encourage buying resources from outside regions.
        {local @advisorEcon}    But its funding will come from your budget!
    $elseif local:policyIndex == 2
        {local @advisorEcon}    A high <b>import subsidy</b> will strongly encourage buying resources from outside regions.
        {local @advisorEcon}    But its funding will come from your budget!
    $elseif local:policyIndex == 3
        {local @advisorEcon}    An <b>import tax</b> will discourage buying resources from other counties.
        {local @advisorEcon}    But you'll gain some funding if they do!
    $endif
$endif

:: openedToForest
@trigger        AdvisorOpened
@conditions     advisorType == "Economy", CameraInRegion(1), RegionUnlocked(2)
@priority       High
// @forcePolicy    Economy
@once
$call ForcePolicyInstant("Economy")
{@advisorEconHill}      Ah, you've expanded into Cypress County. Lucky you.
{@advisorEconHill}      Now you can be <i>condescended to</i> while surrounded by natural splendor.
{@advisorEconHill}      Hope you like the smell of old mushrooms.

:: openedToPrairie
@trigger        AdvisorOpened
@conditions     advisorType == "Ecology", CameraInRegion(1), RegionUnlocked(3)
@priority       High
// @forcePolicy    Ecology
@once
$call ForcePolicyInstant("Ecology")
{@advisorEcolHill}      Ugh... Those Heath County hayseeds always irked me.
{@advisorEcolHill}      They think they're better than everyone because of their fancy college.
{@advisorEcolHill}      Plus their straw hats are weird!
{@advisorEcolHill}      Anyway, what can I help you with?


// :: preBloomRunoff
// @trigger        AlertExamined
// @conditions     alertType == "excess-runoff", CameraInRegion(1)
// @once
// {local @advisorEcol}    Hold on... This farm is just letting manure sit around!
// {local @advisorEcon}    An astute observation. What would you have them do with it?
// {local @advisorEcol}    Well, it's got phosphorus. Why not make use of it?
// {local @advisorEcon}    Who would pay to ship around truckloads of poop when there's Phos 4 Us?
// {local @advisorEcol}    Hmm...


:: runoffTrigger
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", alertRegion == 1
@forcePolicy    Ecology
@queued
@once
$call Pause()
$set global:runoffDiscovered = true
{@advisorEcolHill}      This farm is just letting manure leach into the water table!
{@advisorEcolHill}      That must be behind those algae blooms.
{@advisorEconHill}      Maybe so, but they simply have no more favorable alternatives.
{@advisorEcolHill}      Well, let's make it less favorable. How about a <b>fine</b> for runoff?
{local @cafoFarmer}     A fine!? I'm barely scraping by as is. You'd have me selling at a loss!
{@advisorEconHill}      Hrm... A fine <i>could</i> incentivize selling manure...
{@advisorEconHill}      But Bertram is correct. Selling at a loss could disrupt the supply chain.
{@advisorEcolHill}      What do you think, boss?
$call UnlockCards(RunoffPolicy)

:: genericRunoff
@trigger        AlertExamined
@conditions     alertType == "excess-runoff", alertRegion == 1, global:runoffDiscovered
@queued
$call Pause()
{local @advisorEcol}    More runoff... 
{local @advisorEcol}    Maybe we ought to increase our runoff fine?
{local @advisorEcon}    Careful now! We don't want to bankrupt our farmers.
{local @advisorEcon}    We just need to give them a more favorable option.
$if Visited("region2.unlockStorage")
    {local @advisorEcon}    Or build a <b>Storage</b> unit instead.
$endif

:: discoverFirstBloom
@trigger        AlertExamined
@cutscene
@conditions     alertType == "bloom", alertRegion == 1
@once
$call Pause()
$set global:bloomDiscovered = true
// TODO: trigger ACT 2 HERE.
{@advisorEcolHill}    What's this...?
$call CutsceneBegin()
$call CutscenePrepareImages("intro/frame1-3.png", "intro/frame1-3.png", "intro/frame1-3.png")
    $call CutsceneNextImage()
    Something is wrong with the lakes... They are swamped with revolting green mire!
    {wait 1}
    $call CutsceneClearText()
    $call CutsceneNextImage()
    Manure from CAFOs must be running off into the lake with rainwater.
    {wait 1}
    $call CutsceneClearText()
    $call CutsceneNextImage()
    The cities need the farms for their milk, and farmers are struggling as is...
    {wait 1}
    $call CutsceneClearText()
    $call CutsceneClearImages()
$call CutsceneEnd()
{@advisorEcolHill}    Something must be done! I'll keep an eye out for runoff.
$call OffsetAlgaeGrowthThreshold(0)
$call UnpauseAlertType("ExcessRunoff")
$call AddAutoAlertCondition("ExcessRunoff", 1)
$call Unpause()

:: genericBloomTrigger
@trigger        AlertExamined
@conditions     alertType == "bloom", alertRegion == 1, global:runoffDiscovered
@forcePolicy    Ecology
{local @advisorEcol}    Yikes... Another algae bloom. What should we do about it?
{local @advisorEcol}    We could address the causes by penalizing runoff.
$if PolicyIsUnlocked(SkimmingPolicy)
    {local @advisorEcol}    Or use skimmers to clean up.
$endif

// TODO: add event/trigger for city stress (nearby bloom and/or lacking milk)

:: SellAtLossGrain
@trigger        AlertExamined
@conditions     alertType == "selling-loss", alertRegion == 1, isFromGrainFarm == true
@forcePolicy    Economy
@queued
$call Pause()
{local @grainFarmer}    My best option still loses me money... How am I gonna feed my family?
{local @advisorEcon}    Hmm... This supplier is selling at a loss.
{local @advisorEcon}    If we want to keep business running smoothly, we'd best find a way to decrease costs.
{local @advisorEcon}    Perhaps you can build a shorter road, or decrease taxes and penalties.
$call Unpause()

:: SellAtLossCafo
@trigger        AlertExamined
@conditions     alertType == "selling-loss", alertRegion == 1, isFromGrainFarm == false
@forcePolicy    Economy
@queued
$call Pause()
{local @cafoFarmer}     My farm is losing money... At this rate, I'll have to slow down operations!
{local @advisorEcon}    Hmm... This supplier is selling at a loss.
{local @advisorEcon}    If we want to keep business running smoothly, we'd best find a way to decrease costs.
{local @advisorEcon}    Perhaps you can build a shorter road, or decrease taxes and penalties.
$call Unpause()
