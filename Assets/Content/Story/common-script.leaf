# basePath   common

:: disconnectedTrigger
@trigger        AlertExamined
@conditions     alertType == "disconnected"
@queued

:: policyForcedToZero
@trigger        PolicySet
@conditions     policyIndex == 0, policyForced == true
@cutscene
$call Wait(1.0)
$if local:policyType == "SalesTaxPolicy"
    {local @advisorEcon}    Oh dear.
    {local @advisorEcon}    The <b>Sales Subsidy</b> in {alertRegionName} is costing too much. The county is out of money. 
    {local @advisorEcon}    I must set it to none for now.
$elseif local:policyType == "ImportTaxPolicy"
    {local @advisorEcon}    Oh dear.
    {local @advisorEcon}    The <b>Import Subsidy</b> in {alertRegionName} is costing too much. The county is broke. 
    {local @advisorEcon}    I must set it to none for now.
$elseif local:policyType == "SkimmingPolicy"
    {local @advisorEcol}    Jeepers!
    {local @advisorEcol}    The lake cleanup policy in {alertRegionName} costing too much. The county budget has run dry!
    {local @advisorEcol}    I'll have to set it to none for now.
$endif
{local @advisorEcon}    I recommend you implement a <b>Sales Tax</b> so SAGA can get some funding.


:: policySet
@trigger        PolicySet
@conditions     policyForced == false
@evalPriority   -3
@cutscene
$if intro:pendingPolicy = true
    $set intro:pendingPolicy = false
$endif
$if local:policyType == "RunoffPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcol}    With no runoff fine, Dairy Farms will only sell manure if it earns a profit.
    $elseif local:policyIndex == 1
        {local @advisorEcol}    With a low runoff fine, Dairy Farms will sell manure if the loss is less than $8 per unit.
    $elseif local:policyIndex == 2
        {local @advisorEcol}    With a high runoff fine, Dairy Farms will sell manure if the loss is less than $16 per unit.
    $elseif local:policyIndex == 3
        {local @advisorEcol}    With a very high runoff fine, Dairy Farms will try to sell manure, even if it loses money.
    $endif
$elseif local:policyType == "SkimmingPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcol}    With no Lake Cleanup, you aren't doing anything to remove algae from the lakes. 
    $elseif local:policyIndex == 1
        {local @advisorEcol}    Low Lake Cleanup policy will clear algae from 1 water area for a recurring $1 cost.
        {local @advisorEcol}    But this won't remove all the phosphorus!
    $elseif local:policyIndex == 2
        {local @advisorEcol}    High Lake Cleanup policy will clear algae from 2 water areas for a recurring $2 cost.
        {local @advisorEcol}    But this won't remove all the phosphorus!
    $elseif local:policyIndex == 3
        {local @advisorEcol}    Dredging will clear algae from 3 water areas <b>and</b> remove some phosphorus.
        {local @advisorEcol}    But it will cost a recurring $4!
    $endif
$elseif local:policyType == "SalesTaxPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcon}    Even without Sales Tax, you'll gain $5 for each milk shipment the city consumes.
    $elseif local:policyIndex == 1
        {local @advisorEcon}    With low Sales Tax, you'll gain $1 with every purchase, on top of city revenue.
    $elseif local:policyIndex == 2
        {local @advisorEcon}    With high Sales Tax, you'll gain $3 with every purchase, on top of city revenue.
    $elseif local:policyIndex == 3
        {local @advisorEcon}    Sales Subsidy will make farmers happy, but it costs $2 for every purchase.
        {local @advisorEcon}    That money comes from our county budget!
    $endif
$elseif local:policyType == "ImportTaxPolicy"
    $if     local:policyIndex == 0
        {local @advisorEcon}    With no Import Policy, we won't offset any shipping costs.
    $elseif local:policyIndex == 1
        {local @advisorEcon}    With a Milk Subsidy, we'll pay $6 for each Milk shipment, to offset shipping costs.
    $elseif local:policyIndex == 2
        {local @advisorEcon}    With a Grain Subsidy, we'll pay $6 for each Grain shipment, to offset shipping costs.
    $elseif local:policyIndex == 3
        {local @advisorEcon}    With a Fertilizer Subsidy, we'll pay $6 for each Manure shipment, to offset shipping costs.
    $endif
$endif
$if intro:tutorialComplete = false
// ::setFirstPolicy
    $set intro:tutorialComplete = true
    $call ActivateSim()
    {@advisorEconHill}  A fine choice. 
    {@advisorEconHill}  Let's get this economy started, shall we?
    $call PauseUser()
    $call QueueDialogueBubble(region1_city1, region1.throughForests)
    {@advisorEconHill}  Use the <b>spacebar</b> to toggle <b>Pause.</b>
    $call ShowAnimatedTutorial("PauseTutorial")
    $call OffsetAlgaeGrowthThreshold(0)
$endif

:: runoffCafoGeneric
@trigger        AlertExamined
@evalPriority   -3
@conditions     alertType == "excess-runoff", global:runoffDiscovered, isFromGrainFarm == false
{local @advisorEcol}    This dairy farm is letting manure sit!
{local @cafoFarmer}     Sorry, but it's my best option!
$set local:runoffLevel = PolicyLevelInRegion($local:alertRegion, "RunoffPolicy")
$if local:runoffLevel < 1
    {local @advisorEcol}    I say we institute a runoff fine.
    {local @advisorEcol}    That'll discourage wasting manure.
    {local @advisorEcon}    Careful now... Losing money to a fine could slow their operations!
$elseif local:runoffLevel < 3
    {local @advisorEcol}    Maybe our runoff fine isn't high enough?
    {local @advisorEcon}    Careful now... Losing money to a fine could slow their operations!
$endif

$if global:storageUnlocked, !BuildingBuiltInRegion($local:alertRegion, "Storage")
    {local @cafoFarmer}     Can SAGA build one of those <b>Storage</b> units?
    {local @cafoFarmer}     I could sell manure there without it running off.
$endif

:: grainRunoffGeneric
@trigger        AlertExamined
@evalPriority   -3
@conditions     alertType == "excess-runoff", global:runoffDiscovered, isFromGrainFarm == true
{local @advisorEcol}    Runoff from a grain farm...
{local @advisorEcol}    All fertilizer causes <i>some</i> runoff... 
{local @advisorEcol}    But <b>mineral fertilizer</b> from PHOS4US tends to be overapplied.
{local @grainFarmer}    It's the cheapest option I've got!
{local @grainFarmer}    Even if I <i>could</i> buy manure, it's not always available.
{local @advisorEcol}    Maybe we can find more manure suppliers nearby.
$if global:builtDigester
    {local @advisorEcol} Or better yet, some processed fertilizer!
$endif

:: sellAtLossCafoGeneric
@trigger        AlertExamined
@evalPriority   -3
@conditions     alertType == "selling-loss", isFromGrainFarm == false
{local @cafoFarmer}     My farm is losing money... At this rate, I'll have to slow down milk production!
{local @advisorEcon}    This dairy farm is under financial stress.
{local @advisorEcon}    They may be selling manure at a loss!
$set local:runoffLevel = PolicyLevelInRegion($local:alertRegion, "RunoffPolicy")
$if local:runoffLevel > 0
    {local @advisorEcon}    We could remove that runoff fine.
    {local @advisorEcol}    Hey, that fine is the only thing keeping them from polluting!
$endif
$set local:taxLevel = PolicyLevelInRegion($local:alertRegion, "SalesTaxPolicy")
$if local:taxLevel < 3
    {local @advisorEcon}    We could set a more favorable Sales Tax policy.
    {local @advisorEcon}    I'm sure our farmers would appreciate a Subsidy.
$elseif global:digestersUnlocked, !BuildingBuiltInRegion($local:alertRegion, "Digester")
    {local @advisorEcol}    I say we give them a Processor. They'll pay lots for manure!
$endif
{local @advisorEcon}    If we don't fix this, our cities won't get enough milk!


:: sellAtLossGrainGeneric
@trigger        AlertExamined
@evalPriority   -3
@conditions     alertType == "selling-loss", isFromGrainFarm == true
// @forcePolicy    Economy
// $call Pause()
{local @grainFarmer}      Aw shucks... How am I gonna feed my family?
{local @advisorEcon}      Hmm... This farmer is losing money.
{local @advisorEcon}      I suspect their phosphorus source is too expensive. 
{local @advisorEcon}      Perhaps you can build a shorter road to decrease shipping costs.
$set local:taxLevel = PolicyLevelInRegion($local:alertRegion, "SalesTaxPolicy")
$if local:taxLevel > 0, local:taxLevel < 3
    {local @advisorEcon}    Or set a more favorable tax policy.
$endif
$if global:builtDigester
    {local @advisorEcon}  Otherwise, that <i>Processed Fertilizer</i> is cheaper to ship...
$endif
{viewpoliciesnext}
{local @advisorEcon}    It's your choice, Director.
$call ForcePolicyInstant("Economy")     
// $call Unpause()


:: cityStressGeneric
@trigger        AlertExamined
@evalPriority   -3
@conditions     alertType == "declining-pop"
// $call Pause()
{local @urbanite}      Dang. Our city population is shrinking...
{local @urbanite}      We need clean water and a stable supply of milk to do well.
$call OpenInfoPopup("region1_city1", false)
// $call Unpause()


:: skipTutorial
@trigger    TutorialSkipped
$call CutsceneEnd()
$call FocusClear()
{@phos4us}    Thank you for using PHOS4US TutSkip technology!
// $call SendGlobalAlertForNode("region1_city1", region1.testGlobalAlert)
$call HideAnimatedTutorial()
$set intro:tutorialComplete = true
$set intro:pendingPolicy = false
$call UnlockCards(SalesTaxPolicy)
$call AddAutoAlertCondition("Bloom", 1)
$call OffsetAlgaeGrowthThreshold(0)
$call ReleaseDialogueInteraction()
// $call Unpause()
$call ActivateSim()

// :: testGlobalAlert
// {local  @urbanite}  I hear you've skipped the tutorial... pretty cool.

:: unlockSkimmers
@trigger        AlertExamined // unlocked by first bloom appearance after region 4 opens up
@conditions     alertType == "bloom", AgeOfRegion(4) > 0, global:readyForSkimmers
@forcePolicy    Ecology
@cutscene
@once
{local @urbanite}    I'm starting to worry about these algae blooms...
$if global:skimmersUnlocked == false // band-aid solution for queued "once" alert nodes
    $set global:skimmersUnlocked = true
    {@advisorEcolWetland}   Well, we have all these boats over in Muskeg... What if we used them to skim algae off the lakes?
    {@advisorEconWetland}   That could be costly... And it won't remove the underlying phosphorus.
    {@advisorEconWetland}   For that, we'd need even pricier <i>dredgers.</i>
    {@advisorEcolWetland}   But skimmers could help mitigate the worst effects for now. 
    {viewpoliciesnext}
    {local @advisorEcol}    Hmm... It's up to you, Director.
    $call UnlockCards(SkimmingPolicy)
    $call AddAutoAlertCondition("Bloom", 4) // prepare for digester cutscene
$else
    {viewpoliciesnext}
    {local @advisorEcol}    Maybe those newfangled skimmers can help?
$endif
// $call ForcePolicyInstant("Ecology")

:: GameFailed
@trigger        GameFailed
@conditions     FailureIsEnabled()
@cutscene
//$if FailureIsEnabled()
{local @advisorEcon}    I have bad news... 
{local @advisorEcon}    We have failed {alertRegionName}.
$call CutsceneBegin(6)
$if local:endType == "CityFailed"
	$call CutscenePrepareImages("fail/city-1.png", "fail/city-2.png", "fail/city-3.png")
	$call CutsceneNextImage()
    The city in {alertRegionName} was stressed too long...
    $call CutsceneNextImage()
    The algae blooms and milk shortages were too much.
$elseif local:endType == "TooManyBlooms"
	$call CutscenePrepareImages("fail/algae-1.png", "fail/algae-2.png", "fail/algae-3.png")
	$call CutsceneNextImage()
    The waterways in {alertRegionName} have become choked with algae.
    $call CutsceneNextImage()
    The local ecosystem is heavily disrupted...
$elseif local:endType == "OutOfMoney"
	$call CutscenePrepareImages("fail/algae-1.png", "fail/algae-2.png", "fail/algae-3.png")
	$call CutsceneNextImage()
    SAGA is low on funds in {alertRegionName} with no way to earn them back...
    $call CutsceneNextImage()
    Farms were left disconnected and unable to trade.
$elseif local:endType == "Succeeded"
    ERROR! "Succeeded" should not be the endType of a failed game.
$endif
    $call CutsceneNextImage()
	Your efforts were not enough. You have been replaced as SAGA director. 
    Perhaps your replacement will fare better...
    $call CutsceneClearImages()
    Game over!
    Loading most recent save...
    // $call EndGame()
// {@advisorEconUrban}      Heh heh, you would've failed here, but failure was disabled. Right on.
// {@advisorEconUrban}      {$local:endType} in region {$local:alertRegion}
// $endif

:: GameCompleted
@trigger       GameCompleted
@conditions    FailureIsEnabled()
@cutscene
{local @advisorEcon}    Good news, Director!
{local @advisorEcon}    Our Processed Fertilizer has beat out PHOS4US!
$call ForceAdvisorModule("Ecology")
{local @advisorEcon}    PHOS4US is no longer operating in our counties.
{@phos4us}              Erm, about that... Is SAGA hiring?
$call ForceAdvisorModule("Ecology")
{local @advisorEcol}    We'll see about that, Rupert...
{local @advisorEcol}    With the excess phosphorus cut off, our ecosystem can recover.
{local @advisorEcol}    It will take time, but... SAGA is a success.
$call CutsceneBegin(7)
	$call CutscenePrepareImages("win/1-1.png")
	$call CutsceneNextImage()
	Excellent work, Director! You used policy and technology to activate the Fertilizer Economy.
    $call CutscenePrepareImages("win/2-1.png", "win/2-2.png", "win/2-3.png")
    $call CutsceneNextImage()
    Of course, there is still much work to do.
    $call CutsceneNextImage()
    Residual phosphorus remains in the lakes. We need new research and technology to complete the cleanup.
    $call CutsceneNextImage()
    We will need people like you, taking on these problems by addressing the whole system.
    $call CutscenePrepareImages("win/3-1.png", "win/3-2.png", "win/3-3.png")
	$call CutsceneAllImages(0.3)
    For now, the communities of SAGA flourish through inter-regional trade and cooperation.
    They are in good hands.
    $call Wait(3)
    $call EndGame()


// PRECISION

// GOAL

// PROGRESSION
// Introduce export depots in Region 5
//      Bring up market share graph periodically.
//      


// CHARACTERIZATION/PLOT


// ADDITIONAL DIALOGUE (phos4us)
// Introduce him traveling around the area, checking on crops?
// Spreading slogans, flyers, selling corporate swag
// Giving excuses for 